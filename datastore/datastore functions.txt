Datastore functions


Brief explanation
A lot of these functions take a uid. This does not need to be sent by the client
in some cases. The server is able to use Google's user service to get the user
object of the currently signed in user. One of the fields of the user object
is the user_id.

Some of the functions return a python dictionary that can contain an error message.
These are only error messages related to a problem with the passed in values,
for example if a username has already been taken. The other case is when a Jingle
cannot be edited because the service is busy. The error message can be sent back
to the client to describe the problem to them.


Read Functions

    JinglrUser
    
        getUserById(uid)                                                                                **DONE**
            returns JinglrUser entity if it exists, None otherwise
            
        getUserByUsername(username)                                                                     **DONE**
            returns JinglrUser entity if it exists, None otherwise
            
        getUsersSongs(uid)                                                                              **DONE**
            returns a list of Jingle entities whose author is the user with uid
            The returned jingles have an extra property called 'collab_usernames'
            which is a list of the usernames of the collaborators for each jingle.
            
        getUserCollabs(uid)                                                                             **DONE**
            returns a list of Jingle entities which the user with id uid is collaborating on
            The returned jingles have extra properties. One is 'username' which is the username
            of the author. The other is 'collab_usernames' which is the list of usersnames of the
            collaborators
            
        getCollabInvites(uid)                                                                           **DONE**
            returns a list of Jingle entities which the user with the id uid has been invited to 
            collaborate on. Each jingle has an extra property called 'username' which is the username
            of the jingle author. Each jingle also has an extra property called 'collab_usernames' which
            as i am sure you know by now, is the list of usernames of the other collaborators
            
        getUsernameByUID(uid)                                                                           **DONE**
            internal function to datastore
            returns the username of the user whose id is uid
            will use memchache to reduce query load
            
    
    Jingle
    
        getJingleByID(jid)                                                                              **DONE**
            returns Jingle entity if it exists, None if the jid is invalid.
            The jingle also has a 'username' property which is the username
            of the author. and it has 'collab_usernames' which is a list of usernames
            of the collaborators
            
        getAllJingles(order, reverse_order, max_results, cursor_url)                                    **IN PROGRESS**
            current state of the search function. Does no searching yet, just 
            returns paged results in a specified order
            
            order is one of Orderings as defined at the top of the datastore. Defaults to creation date
            
            reverse_order is a boolean, defaults to False
            
            max_results is the number of results per page. Defaults to 20
            
            cursor_url is what you need to pass back to us to get the next page of results. If None returns the first page
            
            returns? ask Jon
            
        getCollaborators(jid)                                                                           **DONE**
            returns a list of JingleUser entities who are collaborators to this Jingle. returns None if jid is not valid
            
        getEditedJingles()                                                                              **DONE**
            returns a dictionary with jingle IDs as keys and a list of client IDs used in channels as values
            used for updating memcache in the task queue handlers
            Not to be called by endpoints
            
        getJingleJSON(jid)                                                                              **DONE**
            returns the jingle as a dict of the specified jingle or None if jid is not valid
            
            
Blocking Writes
    These functions block until the write to the datastore has been successful
    
    JinglrUser
    
        createUser(uid, username)                                                                       **DONE**
            returns a python dictionary. If there was an error:
                {"errorMessage" : errorMessage}
            or on success:
                {"userKey" : key}
            userKey is the JinglrUser entity key for the newly created user
            
        updateUsername(uid, username)                                                                   **DONE**
            returns a python dictionary. If there was an error:
                {"errorMessage" : errorMessage}
            or on success:
                {"userKey" : key}
            userKey is the JinglrUser entity key of the edited user
            
        updateBio(uid, bio)                                                                             **DONE**
            returns the JinglrUser entity key on success, or None if uid is not valid
            
        updateTags(uid, tags)                                                                           **DONE**
            tags is a list of the new set of tags for the user. It replaces the old tags
            returns the JinglrUser entity key on success, or None if uid is not valid
            
        addCollabInvite(username, jid)                                                                  **DONE**
            This is used to invite the user with username to collaborate on the jingle
            with jid. It adds the jid to the users collab_invites
            
            returns a python dictionary. If there was an error:
                {"errorMessage" : errorMessage}
            or on success:
                {"userKey" : key}
            userKey is the JinglrUser entity key for the updated user entity
            
        answerCollabInvite(uid, jid, accept)                                                            **DONE**    
            uid - the user
            jid - the jingle
            accept - a boolean. If true the invite is accepted, otherwise rejected
            if it is true it adds the users uid to the corresponding jingle
            the invite it removed once answered
            returns a python dictionary. If there was an error:
                {"errorMessage" : errorMessage}
            or on success:
                {"userKey" : key}
            userKey is the JinglrUser entity key for the updated user entity
            
        removeCollab(uid, jid)                                                                          **DONE**
            this is used to stop a particular user collaborating on a particular song.
            may be called when a user wants to stop collaborating on a song or a song
            author wants to remove a collaborator
            returns a python dictionary. If there was an error:
                {"errorMessage" : errorMessage}
            or on success:
                {"jingleKey" : key}
            jingleKey is the Jingle entity key for the updated Jingle entity
            
    Jingle
    
        createJingle(uid, title, genre, tags)                                                           **DONE**
            genre and tags are optional.
            
            returns the key of the newly created Jingle Entity
            
        changeTitle(jid, title)                                                                         **DONE**
            returns the Jingle entity key on success, or None if jid is not valid
            
        changeGenre(jid, genre)                                                                         **DONE**
            returns the Jingle entity key on success, or None if jid is not valid
            
        changeTags(jid, tags)                                                                           **DONE**
            tags is a list of the new set of tags for the jingle. It replaces the old tags
            returns the Jingle entity key on success, or None if jid is not valid
            
        changeJingle(jid, jingle)                                                                       **DONE**    
            saves the updated jingle for this jingle entity. Returns the jingle entity key
            not to be called by end points
            
        beginEditing(jid)                                                                               **DONE**
            called when a user wants to start editing the jingle jid
            
            returns a python dictionary. If there was an error:
                {"errorMessage" : errorMessage}
            or on success:
                {"token" : token}
            token is the channel token that a client can use to set up a channel
            to listen to changes to the jingle from other users
            
        requestNewToken(jid, oldToken)
            called via a request from the client when they notice that their token has expired.
            takes the id of the jingle the client was editing and the old token which must now be removed
            from the relevant JinglrMap.
            returns a fresh token which can be used by the client
            
        stopEditing(client_id)                                                                          **DONE**
            called when a user stops editing a jingle
            this is called automatically for us by the channel service when it detects
            a channel has been closed
            
            
Non blocking writes
    
    
    submitAction(jid, action)                                                                           **DONE**

    this submits a json update action to be processed by the server. The action gets added to
        a task queue to do later, and the function returns.
    
    It takes an action which is a python dictionary, and the song ID
    
        it doesn't return anything but once the action has been completed it will be sent down
        the channels
